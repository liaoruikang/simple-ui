@use 'sass:string';
@use '../common/config';
@use '../function/function' as f;

// bem
@mixin b($block: '', $element: '', $modifier: '', $state: '', $prefix: '') {
  $b: '';
  @if $block != '' {
    $b: config.$namespace + config.$common-separator + $block;
  }
  @if $element != '' {
    $b: $b + config.$element-separator + $element;
  }
  @if $modifier != '' {
    $b: $b + config.$modifier-separator + $modifier;
  }
  @if $state != '' {
    $b: config.$state-prefix + $state;
  }
  @if $prefix != '' {
    $b: $prefix + $b;
  } @else {
    $b: '.' + $b;
  }
  #{string.unquote($b)} {
    @content;
  }
}

// 动画
@mixin transition($arr: null, $time: 0.3s, $mode: cubic-bezier(0.075, 0.82, 0.165, 1)) {
  @if arr != null {
    $str: null;
    @each $value in $arr {
      $str: $str + $value + ' ' + $mode + ' ' + $time + ',';
    }
    transition: string.unquote(string.slice($str, 1, -2));
  }
}

// 生成阴影边框
@mixin border_shadow(
  $orientation: (
    0: 0 0 0 1px,
  ),
  $color: f.get_css_var('bd-color'),
  $mode: inset
) {
  $str: null;
  @each $key, $value in $orientation {
    $str: $str + $value + ' ' + $color + ' ' + $mode + ',';
  }
  box-shadow: string.unquote(string.slice($str, 1, -2));
}

// 公共边框阴影
@mixin shadow($transition: box-shadow) {
  @include border_shadow();
  @include transition($transition);
  &:hover {
    @include border_shadow($color: f.get_css_var('bd-hover-color'));
  }
  &:focus-within {
    @include border_shadow($color: f.get_css_var('bd-focus-color'));
    @content;
  }
}
